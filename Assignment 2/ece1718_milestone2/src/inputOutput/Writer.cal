/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Endri Bezati <endri.bezati@epfl.ch>
// Modified by Ren Rong, Wei Jianguo and Eduardo Juarez <eduardo.juarez@epfl.ch> of UPM (Spain)

// UPM 20120126
//package jpeg.encoder;
package inputOutput;  

/**
 * Standard I/O writer actor.
 */
actor Writer()
 	uint(size=8) Byte,
 	bool pEOF
 		==> 
 			:
 			
	// UPM 20120130
	bool  	DEBUG 		:= true;

	/**
	 * Initializing the file to be written
	 */
	@native procedure Writer_init() end

	/**
	 * Wite a byte to a file
	 */
	@native procedure Writer_write(uint(size=8) byte) end
	
	/**
	 * Close tthe file
	 */
	@native procedure Writer_close() end

	initialize ==>
	do
		Writer_init();
		
		if (DEBUG) then
			//UPM 20120130
			println("Writer ACTION: initialize");
			println("Writer STATE: WriteFile");
			println("-------------------------");
		end
	end
	
	bool peof := false;
	
//  UPM 20120130	
//	GetEOF: action pEOF:[p] ==>
	getEOF: action pEOF:[p] ==>
	
	do
	
		peof := p;
		// UPM 20120130		
		if (DEBUG) then
			//UPM 20120130
			println("Writer ACTION: getEOF");
			// UPM 20120131
			if (peof) then
				println("Writer: File is close");
			end
			println("Writer STATE: ReadEOF");		
			println("-------------------------");

		end		
		// UPM 20120131
		if (peof) then
			Writer_close();
		end		
	end

//  UPM 20120130	
//	Write: action Byte:[b] ==>
	writeData: action Byte:[b] ==>	
	guard
		not peof
	do
		Writer_write(b);
		
		if (DEBUG) then
			//UPM 20120130
			println("Writer ACTION: writeData");
			println("Writer STATE: WriteFile");
			println("-------------------------");
		end				
	end
	
// UPM 20120130	
	schedule fsm WriteFile:
		WriteFile 		(getEOF)	--> ReadEOF;
		ReadEOF			(writeData)	--> WriteFile;

	end	
end
