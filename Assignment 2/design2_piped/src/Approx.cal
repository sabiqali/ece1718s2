actor Approx() uint(size = 8) Data_To_Be_Manipulated ==> uint(size = 8) Approxed_Data, uint(size =1) input_flag:
	
	int i := 0;
	int j := 0;
	int l := 0;
	int jcount := 0;
	int k := 640;
	int a := 0;
	int (size=8) h := 0; 
	int compute_flag := 0;
	int send_flag := 0;
	int m := 640;
	int n := 576;
	int sum :=0;
	int diff :=0;
	int o :=1280;
	int p :=1920;
	//int q :=2560; 
	List (type: uint(size=8), size= 2560) M;
	List (type: uint(size=8), size= 2560) N;
	
	
	
	build_list: action Data_To_Be_Manipulated: [In1]==> input_flag: [flag]
	guard
		i < 2560
	var 
		uint(size = 1) flag := 0
	
	do
		M[i] := In1;
		println("Approx: "+M[i]);
		i := i+1;
		if i = 2560
		then 	
			flag := 1;
		end
		//j:=0;
		//k:=1280;
	end
	
	read_list: action ==>
	guard
		i = 2560,
		o < 2560,
		p < 1920,
		k < 1280,
		j < 640
	do
		//Out1 := M[j];
		//println("Approx2: "+M[j]);
		//j := j + 1; 	
		h := (M[j]+M[j+1]+M[j+2]+M[j+3]+M[k]+M[k+1]+M[k+2]+M[k+3]+M[o]+M[o+1]+M[o+2]+M[o+3]+M[p]+M[p+1]+M[p+2]+M[p+3]) / 16;
			N[j] := h;
				N[j+1] := h;
				N[j+2] := h;
				N[j+3] := h;
				N[k] := h;
				N[k+1] := h;
				N[k+2] := h;
				N[k+3] := h;
				N[o] := h;
				N[o+1] := h;
				N[o+2] := h;
				N[o+3] := h;
				N[p] := h;
				N[p+1] := h;
				N[p+2] := h;
				N[p+3] := h;
			//diff := (M[j] - N[j]) + (M[j+1] - N[j+1]) + (M[j+2] - N[j+2]) + (M[j+3] - N[j+3]) + (M[k] - N[k]) + (M[k+1] - N[k-1]) + (M[k+2]-N[k+2]) + (M[k+3] - N[k+3]) + (M[o] - N[o]) + (M[o+1]-N[o+1]) + (M[o+2]-N[o+2]) + (M[o+3] - N[o+3])+ (M[p] - N[p]) + (M[p+1]-N[p+1]) + (M[p+2]-N[p+2]) + (M[p+3] - N[p+3]);
			//sum := sum + diff;
			println("Approx2: "+N[j] + " " + N[j+1]+ " " + N[k]+ " " + N[k+1] + " " + j + " " + k + " ");
			j := j+4;
			k := k+4;
			o := o+4;
			p := p+4;
			//println(" "+j + " " + k);
			/*if j mod 640 = 0
				then
					jcount := jcount + 4;
					j := 640 * jcount;
					k := j + 640;
					o := k + 640;
					p := o + 640;
				end*/
			//println(p);
			//l := 0;
	end
	
	send_list: action ==> Approxed_Data:[Out1]
	guard
		p = 2560,
		l < 2560
	var
		uint(size = 8) Out1
		
	do
		Out1 := N[l];
		//println("Approx2: "+l+" "+Out1);
		l := l + 1; 
		/*if l = 2560
		then
			flag := 1;
		end */
		//i := 0;
	end
	
	
	init: action ==> input_flag: [flag]
	var 
		uint (size = 1) flag := 1
	do
		i := 0;
		j := 0;
		k := 640;
		o := 1280;
		p := 1920;
		l := 0;
		k := 1280;
	end
	
	schedule fsm s_first:
		s_first ( build_list ) --> s_second;
		s_second( read_list ) --> s_third;
		s_third( send_list ) --> s_fourth;
		s_fourth(init) --> s_first;
	end
	/*first: action Data_To_Be_Manipulated: [In1] ==> 
	guard
		i < 2560
	do
		while i < 2560
		do
		print("Approx1 : "+ In1);
		M[i] := In1;
		i := i+1;
		end
		
		if i = 2560
		then	
			compute_flag := 1;
		else
			compute_flag := 0;
		end
	end
	
	second: action ==>
	guard
		compute_flag = 1
	do
		while j < 1280
		do
			//computation
			h := (M[j]+M[j+1]+M[k]+M[k+1]) / 4;
			N[j] := h;
			N[j+1] := h;
			N[k] := h;
			N[k+1] := h;
			j := j+2;
			k := k+2;
		end
	
		if	j = 1280 && k = 2560
			then
				send_flag := 1;
			else
	   		 	send_flag := 0;
	   		end
	end
	
	third: action ==> Approxed_Data: [Out1]
	guard 
		send_flag = 1
	var
		uint (size=8) Out1
	do
		while a < 2560
		do
		Out1 := N[a];
		a := a+1;
		end
		
	end*/
	
end
